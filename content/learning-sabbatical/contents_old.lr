body:

/// exposition of status quo: I'm a software and product guy working on a cool team. 


/// inciting incident: ML is taking over the world.

/// rising action

I start to take interest, read books, poke around.

/// crisis

Obstacles:
- Increased management responsibility is soaking up attempts, the ways I'm growing on the job are more about leadership and management. False starts at deep dives into stats. Coursera courses unfinished. 
- Not so easy to dive into ML, which really is about mastering stats, then to say, pick up another programming language or get familiar with another application development tool

https://twitter.com/krosaen/status/643760233077207040

Fears:
- money
- harder to get a job with no job
- will employers hiring for the jobs I want take my self study seriously

/// climax / resolution

The year is coming to a close. Over break I get a chance to think concretely about what it will look like. I get encouragement from family

[dad's text message](#)

I give notice in early January. The team was great. As usual in situations like these, you find that you aren't as big a deal as you suspected :) Not to say leaving doesn't have an impact, but good people will understand and encourage. Food52 was great in this regard.

/// falling action

So here I am. You can read more about my curriculum [here](#) and follow along [here](#). It's slightly embarrassing how elementary my studies are at this point, but between going on a 2 week vacation and getting this dang website setup, I've only had about 2 weeks of study so far and hope to have more to show soon.

Still TBD on many of my fears!
- boredom
- productivity


/// end









I recently left my job to take time off and learn. I though sharing my experience and reasoning might be of interest to others; hence this post.

I'm about 12 years out of school, and for skills relevant to my craft of building products, I most certainly have learned more since leaving school than during the program. There's no better way to get better at coding than to develop software professionally along side smarter and more experienced people (first 4.5 years). There's no better way to improve your ability to build a new product that will delight users and/or make a good business than to try to build one from scratch (next 4 years). There's no better way to learn about leadership than to lead a team (the last 3.5 years). I can't say I've been awesome at all (any) of it, but each stage has lead to the next and I've felt comfortable making the leaps; after building stuff for a while and getting better at it, the next logical step may be, "how do I know *what* to build", and that's where the fascination with startups and product development came from. Then you try to build something on your own, you realize, no matter how experienced or skilled you may be, there's a limit to what you can do, you might start to wonder, "how can I get a group of people to work together to achieve greater things?" 

Within this comfy world of building stuff by writing software 

But what if you want to dive into an unrelated field, one that isn't so easy to pick up on the job? On the face of it machine learning *is* a related skill as it boils down to applying algorithms using familiar programming languages and tools. But the more time I've spent dabbling, the clearer it has become that to apply machine learning with any sort of confidence, you really need a strong stats and probability background. You can take a dataset and throw a tool at it, but if you don't have the stats chops to interpret the results, it's a bit like following a ruby on rails tutorial to build a website without understanding how the ruby interpreter works, the web, relational databases etc. You will get somewhere, but only so far, and my goal now is to gain enough expertise to go beyond the plug and chug.


https://twitter.com/krosaen/status/643760233077207040






I recently left my job leading a product and engineering team at [a startup](http://food52.com) and embarked on what I've come to call a "learning sabbatical" [focused on machine learning](/ml/curriculum). The usual reasons for embarking on a sabbatical apply to me: I've been working intensely for the last 7 years (in my case co-founding a website which lead to taking a leadership position at another startup) and could use an extended pause to reflect and rest. But what really drove me to leave my job was more of an urge to study machine learning deeply.

Staying sharp is important, and to a certain degree this is possible while on the job. I've undoubtedly learned more since graduating from engineering school than I did during the program. The practical experience you gain while working is in many ways better than academic and book learning for such an applied profession as engineering and product development. But occasionally you need to pick up entirely new skills, be it picking up a new programming language, learning how to use a wire framing tool. Even this is quite feasible on the job through the combination of tinkering in your spare time, and doing things like working through books with co-workers and discussing over lunch.

Applying your existing skils vs becoming more skilled. Sharpening a knive vs crafting an axe.

But let's say there's an entire new field or sub-field that you increasingly want to get into

## back to school vs self directed study

## Importance of staying current: ongoing maintenance and tinkering vs occasional deep dive

## financing

living below means, possible with many tech jobs
ack that i'm privileged

## Risks

demonstrating real skill in absence of accreditation
our field tends to be meritocratic and similarly actually knowing how to do stuff is most important (similarly, a degree without real skills does not go unnoticed)

ack that already having a masters in computer science doesn't put me at same risk as, say, someone from a different field trying to get into data science from the ground up.

# A Learning Sabbatical

### going deep vs dabbling.
IMO one should always be dabbling to stay abreast in technology;
examples might be doing a react or Unity tutorial, reading a book on
clojure, taking a MOOC, or at least browsing its curriculum. what a
learning sabbatical provides for is a depth that isn't possible in spare
time (or at least spare time of someone with a family). So for me part
of the challenge is in staying focused in my goal of gaining mastery of
some key concepts in probability and stats underlying ML, and in gaining
practical experience applying ML techniques. It's *very* temping to have
this be an endless exploration of cool technology; I almost bought an
oculus, would love to play with wearables etc etc. But if after a few
months I emerged with a surface level understanding of 5 areas, I think
it would have been less worth it, and I'm better off doing those sorts
of surface level explorations on the side continuously.

### learning surplus



2009 -> 2016 RTF and Food52. Funny that it has been 7 years, the usual period
for sabbaticals with professors.

In some ways quitting your job without another lined up other than
having your days free to study and build whatever you want seems a bit
crazy, or at least very risky. But when you consider the alternative for
training: formal school, it begins to feel like a rational choice

vs going back to school
+ no tuition
+ abundance of amazing online materials and books that are likely more up to date than university classes
- requires creating your own curriculum
- challenge of demonstrating the worth of time spent learning to future employers

not an original idea
- http://datasciencemasters.org
- http://www.becomingadatascientist.com
